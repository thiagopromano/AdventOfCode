import AOC

aoc 2021, 6 do
  use InputHelper
  def get_input do
    input_string()
    |> String.trim()
    |> String.split(",", trim: true)
    |> Enum.map(&String.to_integer/1)
  end

  # returns a map with the amount of fishes generated by a fish that started as a zero on day zero
  # {days_passed, amount_of_fish}
  def get_fish_evolution() do
    1..80
    |> Enum.map_reduce([0], fn days, fish_array ->
      new_fish_array = simulate_fish_increase(fish_array)
      {{days, length(new_fish_array)}, new_fish_array} end)
    |> elem(0)
    |> Map.new()
  end

  def simulate_fish_increase(fish_array) do
    Enum.flat_map(fish_array,
    fn 0 -> [6,8]
      other_number -> [other_number-1]
   end)
  end
  def p1 do
    fish_evolution = get_fish_evolution()
    get_input()
    |> Enum.map(fn day -> Map.fetch!(fish_evolution, 80-day) end)
    |> Enum.sum()
  end

  def p2 do
    fish_evolution = get_fish_evolution2()
    get_input()
    |> Enum.map(fn day -> Map.fetch!(fish_evolution, 256-day) end)
    |> Enum.sum()
  end


  def get_fish_evolution2() do
    initial_map = Enum.zip(0..8, Stream.concat([1], Stream.cycle([0]))) |> Map.new()
    1..256
    |> Enum.map_reduce(initial_map, fn days, fish_map ->
      new_fish_map = simulate_fish_increase2(fish_map)
      sum = Enum.map(new_fish_map, &elem(&1, 1)) |> Enum.sum()
      {{days, sum}, new_fish_map}
    end)
    |> elem(0)
    |> Map.new()
  end

  def simulate_fish_increase2(fish_map) do
    multiplying = Map.fetch!(fish_map, 0)

    0..8
    |> Enum.map(fn day -> {day, Map.get(fish_map, day+1, 0)} end)
    |> Map.new()
    |> Map.update!(6, &(&1 + multiplying))
    |> Map.update!(8, &(&1 + multiplying))
  end
end
